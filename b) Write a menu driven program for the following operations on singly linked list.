
Section I: Data Structures

Q1(b) Write a menu-driven program for the following operations on a singly linked list:

We will create a Singly Linked List and implement two operations:

1. Create a linked list and display it.


2. Search an element in the linked list.



Here’s the C code to implement these operations:

#include <stdio.h>
#include <stdlib.h>

// Definition of the Node structure
struct Node {
    int data;
    struct Node* next;
};

// Function to create and display a linked list
void display(struct Node* head) {
    struct Node* temp = head;
    if (temp == NULL) {
        printf("The list is empty.\n");
        return;
    }
    printf("The list contains: ");
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to add a node at the end of the list
struct Node* appendNode(struct Node* head, int data) {
    struct Node* newNode = createNode(data);
    if (head == NULL) {
        return newNode;  // The list is empty, return the new node as the head
    } else {
        struct Node* temp = head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;  // Append the new node at the end
    }
    return head;
}

// Function to search an element in the linked list
int search(struct Node* head, int key) {
    struct Node* temp = head;
    while (temp != NULL) {
        if (temp->data == key) {
            return 1;  // Element found
        }
        temp = temp->next;
    }
    return 0;  // Element not found
}

int main() {
    struct Node* head = NULL;
    int choice, value, key;
    
    do {
        printf("\nMenu:\n");
        printf("1. Create and display the linked list\n");
        printf("2. Search an element in the list\n");
        printf("3. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        
        switch (choice) {
            case 1:
                // Create a linked list with some initial values
                head = appendNode(head, 10);
                head = appendNode(head, 20);
                head = appendNode(head, 30);
                display(head);
                break;
            case 2:
                printf("Enter the element to search: ");
                scanf("%d", &key);
                if (search(head, key)) {
                    printf("Element %d found in the list.\n", key);
                } else {
                    printf("Element %d not found in the list.\n", key);
                }
                break;
            case 3:
                printf("Exiting program.\n");
                break;
            default:
                printf("Invalid choice! Please try again.\n");
        }
    } while (choice != 3);
    
    return 0;
}

Explanation:

1. Node Structure: A linked list node contains data (integer) and a pointer to the next node.


2. display Function: This function prints the entire linked list, traversing from head to tail.


3. createNode Function: Creates a new node with the given data and returns it.


4. appendNode Function: Adds a new node at the end of the list. If the list is empty, it becomes the head.


5. search Function: Traverses the linked list to check if the given element exists. If found, it returns 1; otherwise, 0.


6. Menu-Driven Program: The user can:

Create a linked list and display it.

Search for an element in the linked list.





---

Section II: Database Management Systems

Q2A) Create the database and insert records in PostgreSQL

Here’s the SQL code to create the necessary tables (Employee and Project) and insert some sample data.

-- Create Employee table
CREATE TABLE Employee (
    empno SERIAL PRIMARY KEY,
    emp_name VARCHAR(100),
    city VARCHAR(50),
    designation VARCHAR(50),
    salary DECIMAL(10, 2),
    projno INT,
    FOREIGN KEY (projno) REFERENCES Project(projno)
);

-- Create Project table
CREATE TABLE Project (
    projno SERIAL PRIMARY KEY,
    proj_name VARCHAR(100),
    status VARCHAR(20) CHECK (status IN ('Complete', 'In progress')),
    start_date DATE
);

-- Insert sample records into Project table
INSERT INTO Project (proj_name, status, start_date)
VALUES
('AI Research', 'In progress', '2023-01-10'),
('Robotics', 'Complete', '2022-06-20'),
('Data Analysis', 'In progress', '2024-03-05'),
('Blockchain', 'In progress', '2025-05-01');

-- Insert sample records into Employee table
INSERT INTO Employee (emp_name, city, designation, salary, projno)
VALUES
('Alice', 'New York', 'Data Scientist', 80000, 1),
('Bob', 'London', 'Engineer', 70000, 2),
('Charlie', 'San Francisco', 'Project Manager', 100000, 3),
('David', 'Boston', 'Software Developer', 90000, 4),
('Eve', 'Los Angeles', 'Data Scientist', 95000, 1);


---

Q2B) Execute the following queries in PostgreSQL

1. i. Find the names of all Employees working on project no 105.



SELECT emp_name 
FROM Employee
WHERE projno = 105;

2. ii. Count the number of Projects which are “In progress”.



SELECT COUNT(*) 
FROM Project
WHERE status = 'In progress';

3. iii. Change start date of project “Robotics” to 15/12/2022.



UPDATE Project 
SET start_date = '2022-12-15'
WHERE proj_name = 'Robotics';

4. iv. Increase the salaries of all employees working on project 10 by 5%.



UPDATE Employee
SET salary = salary * 1.05
WHERE projno = 10;

5. v. Delete records of all completed projects.



DELETE FROM Project 
WHERE status = 'Complete';


---

Q2C) Query to display the project names on which more than 3 employees are working.

SELECT p.proj_name
FROM Project p
JOIN Employee e ON p.projno = e.projno
GROUP BY p.proj_name
HAVING COUNT(e.empno) > 3;


---

Q2C OR) Create a view to find all Employees who are working on projects which started on ‘1/4/2025’ and status is “in progress”.

CREATE VIEW Employees_On_Specific_Project AS
SELECT e.emp_name
FROM Employee e
JOIN Project p ON e.projno = p.projno
WHERE p.start_date = '2025-04-01' AND p.status = 'In progress';


---

Conclusion

Section I: The C program implements a Singly Linked List with the ability to create and display the list, and search for an element.

Section II: The SQL queries for creating the Employee and Project tables, inserting records, and querying based on the conditions provided are included. Also, the view to display employees working on a project with a specific start date and status is provided.


Let me know if you need any further clarifications or modifications!

