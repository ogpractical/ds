
## ✅ **Q1 (Choose either of the two options)**

### Option 1: Recursive Merge Sort in C

```c
#include <stdio.h>

void merge(int arr[], int left, int mid, int right) {
    int i, j, k;
    int n1 = mid - left + 1;
    int n2 = right - mid;

    int L[n1], R[n2];

    for (i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[mid + 1 + j];

    i = 0; j = 0; k = left;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) arr[k++] = L[i++];
        else arr[k++] = R[j++];
    }

    while (i < n1) arr[k++] = L[i++];
    while (j < n2) arr[k++] = R[j++];
}

void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left)/2;
        mergeSort(arr, left, mid);
        mergeSort(arr, mid+1, right);
        merge(arr, left, mid, right);
    }
}

int main() {
    int n;
    printf("Enter number of elements: ");
    scanf("%d", &n);
    int arr[n];
    printf("Enter %d integers:\n", n);
    for (int i = 0; i < n; i++)
        scanf("%d", &arr[i]);

    mergeSort(arr, 0, n-1);

    printf("Sorted array: ");
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    return 0;
}
```

---

### OR

### Option 2: Static Stack Implementation in C

```c
#include <stdio.h>
#define SIZE 100

int stack[SIZE];
int top = -1;

void Initialize() {
    top = -1;
}

void Push(int val) {
    if (top == SIZE - 1)
        printf("Stack Overflow\n");
    else
        stack[++top] = val;
}

int Pop() {
    if (top == -1) {
        printf("Stack Underflow\n");
        return -1;
    }
    return stack[top--];
}

int IsEmpty() {
    return top == -1;
}

int IsFull() {
    return top == SIZE - 1;
}

int Peek() {
    if (top == -1) {
        printf("Stack is empty\n");
        return -1;
    }
    return stack[top];
}

int main() {
    Initialize();
    Push(10);
    Push(20);
    Push(30);
    printf("Top element: %d\n", Peek());
    printf("Popped: %d\n", Pop());
    printf("Is stack empty? %s\n", IsEmpty() ? "Yes" : "No");
    return 0;
}
```

---

## ✅ **Q2: Database Management Systems**

### Table Creation (in PostgreSQL):

```sql
CREATE TABLE Customer (
    custno INT PRIMARY KEY,
    cust_name VARCHAR(50),
    cust_city VARCHAR(50)
);

CREATE TABLE Account (
    acctno INT PRIMARY KEY,
    acct_type VARCHAR(10) CHECK (acct_type IN ('saving', 'current')),
    balance DECIMAL CHECK (balance > 0),
    branch_name VARCHAR(50),
    custno INT REFERENCES Customer(custno)
);
```

---

### Sample Queries (Any 3):

1. **Display all saving accounts with balance > 5000**:

```sql
SELECT * FROM Account
WHERE acct_type = 'saving' AND balance > 5000;
```

2. **Count customers in city “Pune”**:

```sql
SELECT COUNT(*) FROM Customer
WHERE cust_city = 'Pune';
```

3. **Find total balance at branch “M.G.Road”**:

```sql
SELECT SUM(balance) AS total_balance FROM Account
WHERE branch_name = 'M.G.Road';
```

4. **Delete customer whose name is "Ramnath"**:

```sql
DELETE FROM Customer
WHERE cust_name = 'Ramnath';
```

5. **Update customer city**:

```sql
UPDATE Customer
SET cust_city = 'Pune'
WHERE cust_name = 'Sanjay';
```

---

### Part C: Write a query to find number of account holders in each city

```sql
SELECT cust_city, COUNT(Account.acctno) AS account_holders
FROM Customer
JOIN Account ON Customer.custno = Account.custno
GROUP BY cust_city;
```

---

Let me know if you want the data insertions or sample output for the queries.
